import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.sqlite.SQLiteDataSource;

public class UserRegistrationGUI {
    public static void main(String[] args) {
        // Configuração da fonte de dados SQLite
        SQLiteDataSource ds = new SQLiteDataSource();
        ds.setUrl("jdbc:sqlite:Clientes.db");

        try (Connection connection = ds.getConnection(); Statement statement = connection.createStatement()) {
            
            // Criação da tabela 'Clientes'
            String createTableSQL = "CREATE TABLE IF NOT EXISTS Clientes ("
                    + "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                    + "username TEXT NOT NULL, "
                    + "telefone TEXT NOT NULL UNIQUE, "
                    + "endereço TEXT NOT NULL, "
                    + "CPF TEXT NOT NULL UNIQUE, "
                    + "pontos INTEGER DEFAULT 0)";
            statement.execute(createTableSQL);
            System.out.println("Tabela 'Clientes' criada com sucesso.");
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Iniciar a GUI de registro de usuário
        SwingUtilities.invokeLater(() -> createAndShowGUI(ds));
    }

    private static void createAndShowGUI(SQLiteDataSource ds) {
        JFrame frame = new JFrame("Cadastro de Usuários");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 550);
        frame.setLocationRelativeTo(null);

        JTabbedPane tabbedPane = new JTabbedPane();

        tabbedPane.addTab("Criar Usuário", createCreateUserPanel(frame, ds));
        tabbedPane.addTab("Listar Usuários", createListClientesPanel(ds));
        tabbedPane.addTab("Atualizar Usuário", createUpdateUserPanel(ds));
        tabbedPane.addTab("Excluir Usuário", createDeleteUserPanel(ds));
        tabbedPane.addTab("Atribuir Pontos", createAssignPointsPanel(ds));

        frame.getContentPane().add(tabbedPane);
        frame.pack();
        frame.setVisible(true);
    }

    private static JPanel createCreateUserPanel(JFrame frame, SQLiteDataSource ds) {
        JPanel panel = new JPanel(new GridBagLayout());

        JLabel nameLabel = new JLabel("Nome:");
        JTextField nameField = new JTextField(20);
        JLabel phoneLabel = new JLabel("Telefone:");
        JTextField phoneField = new JTextField(20);
        JLabel addressLabel = new JLabel("Endereço:");
        JTextField addressField = new JTextField(20);
        JLabel cpfLabel = new JLabel("CPF:");
        JTextField cpfField = new JTextField(20);
        JButton createButton = new JButton("Adicionar Usuário");
        JButton backButton = new JButton("Menu Principal");

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel.add(nameLabel, gbc);

        gbc.gridy++;
        panel.add(phoneLabel, gbc);

        gbc.gridy++;
        panel.add(addressLabel, gbc);

        gbc.gridy++;
        panel.add(cpfLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(nameField, gbc);

        gbc.gridy++;
        panel.add(phoneField, gbc);

        gbc.gridy++;
        panel.add(addressField, gbc);

        gbc.gridy++;
        panel.add(cpfField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(createButton, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(backButton, gbc);

        createButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String name = nameField.getText();
                String phone = phoneField.getText();
                String address = addressField.getText();
                String cpf = cpfField.getText();

                if (name.isEmpty() || address.isEmpty() || phone.isEmpty() || cpf.isEmpty()) {
                    JOptionPane.showMessageDialog(panel, "Preencha todos os campos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (phone.length() < 9 || phone.length() > 11) {
                    JOptionPane.showMessageDialog(panel, "O telefone deve ter entre 9 e 11 dígitos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (cpf.length() != 11) {
                    JOptionPane.showMessageDialog(panel, "O CPF deve ter 11 dígitos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try (Connection conn = ds.getConnection()) {
                    // Verificação de duplicidade de CPF e telefone
                    String checkQuery = "SELECT COUNT(*) FROM Clientes WHERE CPF = ? OR telefone = ?";
                    PreparedStatement checkStatement = conn.prepareStatement(checkQuery);
                    checkStatement.setString(1, cpf);
                    checkStatement.setString(2, phone);
                    ResultSet checkResultSet = checkStatement.executeQuery();
                    checkResultSet.next();
                    int count = checkResultSet.getInt(1);
                    if (count > 0) {
                        JOptionPane.showMessageDialog(panel, "CPF ou Telefone já cadastrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String insertQuery = "INSERT INTO Clientes (username, telefone, endereço, CPF) VALUES (?, ?, ?, ?)";
                    PreparedStatement statement = conn.prepareStatement(insertQuery);
                    statement.setString(1, name);
                    statement.setString(2, phone);
                    statement.setString(3, address);
                    statement.setString(4, cpf);
                    int rowsAffected = statement.executeUpdate();
                    JOptionPane.showMessageDialog(panel, rowsAffected + " registro inserido com sucesso.");
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao adicionar usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                MenuGUI.main(new String[0]); // Abre a janela do menu principal
            }
        });

        return panel;
    }

    private static JPanel createListClientesPanel(SQLiteDataSource ds) {
        JPanel panel = new JPanel(new GridBagLayout());

        JLabel searchLabel = new JLabel("Buscar por CPF ou Telefone:");
        JTextField searchField = new JTextField(20);
        JButton searchButton = new JButton("Buscar");
        JTable table = new JTable();
        DefaultTableModel model = new DefaultTableModel(new Object[]{"ID", "Nome", "Telefone", "Endereço", "CPF", "Pontos"}, 0);
        table.setModel(model);
        JScrollPane scrollPane = new JScrollPane(table);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel.add(searchLabel, gbc);

        gbc.gridx++;
        panel.add(searchField, gbc);

        gbc.gridx++;
        panel.add(searchButton, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(scrollPane, gbc);

        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String searchQuery = searchField.getText();

                if (searchQuery.isEmpty()) {
                    JOptionPane.showMessageDialog(panel, "Digite o CPF ou Telefone para buscar.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try (Connection conn = ds.getConnection()) {
                    String selectQuery = "SELECT * FROM Clientes WHERE CPF = ? OR telefone = ?";
                    PreparedStatement statement = conn.prepareStatement(selectQuery);
                    statement.setString(1, searchQuery);
                    statement.setString(2, searchQuery);
                    ResultSet resultSet = statement.executeQuery();
                    model.setRowCount(0); // Limpar a tabela

                    while (resultSet.next()) {
                        int id = resultSet.getInt("id");
                        String name = resultSet.getString("username");
                        String phone = resultSet.getString("telefone");
                        String address = resultSet.getString("endereço");
                        String cpf = resultSet.getString("CPF");
                        int points = resultSet.getInt("pontos");
                        model.addRow(new Object[]{id, name, phone, address, cpf, points});
                    }

                    if (model.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(panel, "Nenhum usuário encontrado.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao carregar usuários.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        return panel;
    }

    private static JPanel createUpdateUserPanel(SQLiteDataSource ds) {
        JPanel panel = new JPanel(new GridBagLayout());

        JLabel searchLabel = new JLabel("Buscar por CPF ou Telefone:");
        JTextField searchField = new JTextField(20);
        JButton searchButton = new JButton("Buscar");
        JLabel nameLabel = new JLabel("Nome:");
        JTextField nameField = new JTextField(20);
        JLabel phoneLabel = new JLabel("Telefone:");
        JTextField phoneField = new JTextField(20);
        JLabel addressLabel = new JLabel("Endereço:");
        JTextField addressField = new JTextField(20);
        JLabel cpfLabel = new JLabel("CPF:");
        JTextField cpfField = new JTextField(20);
        JButton updateButton = new JButton("Atualizar Usuário");

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel.add(searchLabel, gbc);

        gbc.gridx++;
        panel.add(searchField, gbc);

        gbc.gridx++;
        panel.add(searchButton, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(nameLabel, gbc);

        gbc.gridx++;
        panel.add(nameField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(phoneLabel, gbc);

        gbc.gridx++;
        panel.add(phoneField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(addressLabel, gbc);

        gbc.gridx++;
        panel.add(addressField, gbc);

        gbc.gridx = 0;
        gbc.gridy++;
        panel.add(cpfLabel, gbc);

        gbc.gridx++;
        panel.add(cpfField, gbc);

        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(updateButton, gbc);

        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String searchQuery = searchField.getText();

                if (searchQuery.isEmpty()) {
                    JOptionPane.showMessageDialog(panel, "Digite o CPF ou Telefone para buscar.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try (Connection conn = ds.getConnection()) {
                    String selectQuery = "SELECT * FROM Clientes WHERE CPF = ? OR telefone = ?";
                    PreparedStatement statement = conn.prepareStatement(selectQuery);
                    statement.setString(1, searchQuery);
                    statement.setString(2, searchQuery);
                    ResultSet resultSet = statement.executeQuery();

                    if (resultSet.next()) {
                        int id = resultSet.getInt("id");
                        String name = resultSet.getString("username");
                        String phone = resultSet.getString("telefone");
                        String address = resultSet.getString("endereço");
                        String cpf = resultSet.getString("CPF");

                        nameField.setText(name);
                        phoneField.setText(phone);
                        addressField.setText(address);
                        cpfField.setText(cpf);
                    } else {
                        JOptionPane.showMessageDialog(panel, "Usuário não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao buscar usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String cpf = cpfField.getText();
                String name = nameField.getText();
                String phone = phoneField.getText();
                String address = addressField.getText();

                if (name.isEmpty() || phone.isEmpty() || address.isEmpty() || cpf.isEmpty()) {
                    JOptionPane.showMessageDialog(panel, "Preencha todos os campos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (phone.length() < 9 || phone.length() > 11) {
                    JOptionPane.showMessageDialog(panel, "O telefone deve ter entre 9 e 11 dígitos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (cpf.length() != 11) {
                    JOptionPane.showMessageDialog(panel, "O CPF deve ter 11 dígitos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try (Connection conn = ds.getConnection()) {
                    // Verificação de duplicidade de CPF e telefone
                    String checkQuery = "SELECT COUNT(*) FROM Clientes WHERE (CPF = ? OR telefone = ?) AND CPF != ?";
                    PreparedStatement checkStatement = conn.prepareStatement(checkQuery);
                    checkStatement.setString(1, cpf);
                    checkStatement.setString(2, phone);
                    checkStatement.setString(3, cpf);
                    ResultSet checkResultSet = checkStatement.executeQuery();
                    checkResultSet.next();
                    int count = checkResultSet.getInt(1);
                    if (count > 0) {
                        JOptionPane.showMessageDialog(panel, "CPF ou Telefone já cadastrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String updateQuery = "UPDATE Clientes SET username = ?, telefone = ?, endereço = ? WHERE CPF = ?";
                    PreparedStatement statement = conn.prepareStatement(updateQuery);
                    statement.setString(1, name);
                    statement.setString(2, phone);
                    statement.setString(3, address);
                    statement.setString(4, cpf);
                    int rowsAffected = statement.executeUpdate();
                    JOptionPane.showMessageDialog(panel, rowsAffected + " registro(s) atualizado(s) com sucesso.");
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao atualizar usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        return panel;
    }

    private static JPanel createDeleteUserPanel(SQLiteDataSource ds) {
        JPanel panel = new JPanel(new GridBagLayout());

        JLabel searchLabel = new JLabel("Buscar por CPF ou Telefone:");
        JTextField searchField = new JTextField(20);
        JButton searchButton = new JButton("Buscar");
        JButton deleteButton = new JButton("Excluir");

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel.add(searchLabel, gbc);

        gbc.gridx++;
        panel.add(searchField, gbc);

        gbc.gridx++;
        panel.add(searchButton, gbc);

        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(deleteButton, gbc);

        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String searchQuery = searchField.getText();

                if (searchQuery.isEmpty()) {
                    JOptionPane.showMessageDialog(panel, "Digite o CPF ou Telefone para buscar.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try (Connection conn = ds.getConnection()) {
                    String selectQuery = "SELECT * FROM Clientes WHERE CPF = ? OR telefone = ?";
                    PreparedStatement statement = conn.prepareStatement(selectQuery);
                    statement.setString(1, searchQuery);
                    statement.setString(2, searchQuery);
                    ResultSet resultSet = statement.executeQuery();

                    if (resultSet.next()) {
                        String name = resultSet.getString("username");
                        String phone = resultSet.getString("telefone");
                        String address = resultSet.getString("endereço");
                        String cpf = resultSet.getString("CPF");
                        String message = String.format("Nome: %s\nTelefone: %s\nEndereço: %s\nCPF: %s\n\nDeseja excluir este usuário?", name, phone, address, cpf);

                        int confirm = JOptionPane.showConfirmDialog(panel, message, "Confirmação", JOptionPane.YES_NO_OPTION);
                        if (confirm == JOptionPane.YES_OPTION) {
                            String deleteQuery = "DELETE FROM Clientes WHERE CPF = ? OR telefone = ?";
                            PreparedStatement deleteStatement = conn.prepareStatement(deleteQuery);
                            deleteStatement.setString(1, searchQuery);
                            deleteStatement.setString(2, searchQuery);
                            int rowsAffected = deleteStatement.executeUpdate();
                            JOptionPane.showMessageDialog(panel, rowsAffected + " registro(s) excluído(s) com sucesso.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(panel, "Usuário não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao buscar usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        return panel;
    }
    
    private static JPanel createAssignPointsPanel(SQLiteDataSource ds) {
        JPanel panel = new JPanel(new GridBagLayout());

        JLabel idLabel = new JLabel("ID do Usuário:");
        JTextField idField = new JTextField(10);
        JButton searchButton = new JButton("Buscar");
        JLabel purchaseLabel = new JLabel("Valor da Compra:");
        JTextField purchaseField = new JTextField(10);
        JButton calculateButton = new JButton("Calcular Pontos");
        JLabel deductPoints = new JLabel("Redução de Pontos:");
        JTextField negativePoints = new JTextField(10);
        JButton lowerButton = new JButton("Reduzir Pontos");
        

        JLabel pointsLabel = new JLabel("Pontos do Usuário:");
        JTextField pointsField = new JTextField(10);
        JButton assignButton = new JButton("Atribuir Pontos");

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel.add(idLabel, gbc);

        gbc.gridx++;
        panel.add(idField, gbc);

        gbc.gridx++;
        panel.add(searchButton, gbc);

        gbc.gridy++;
        gbc.gridx = 0;
        panel.add(purchaseLabel, gbc);

        gbc.gridx++;
        panel.add(purchaseField, gbc);

        gbc.gridx++;
        panel.add(calculateButton, gbc);

        gbc.gridy++;
        gbc.gridx = 0;
        panel.add(pointsLabel, gbc);

        gbc.gridx++;
        panel.add(pointsField, gbc);

        gbc.gridx++;
        panel.add(assignButton, gbc);
        
        gbc.gridy++;
        gbc.gridx=0;
        panel.add(deductPoints, gbc);
        
        gbc.gridx++;
        panel.add(negativePoints, gbc);
        
        gbc.gridx++;
        panel.add(lowerButton, gbc);

        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int userId = Integer.parseInt(idField.getText());
                try (Connection conn = ds.getConnection()){
                    String query = "SELECT pontos FROM Clientes WHERE id = ?";
                    PreparedStatement statement = conn.prepareStatement(query);
                    statement.setInt(1, userId);
                    ResultSet resultSet = statement.executeQuery();
                    if (resultSet.next()) {
                        int points = resultSet.getInt("pontos");
                        pointsField.setText(Integer.toString(points));
                    } else {
                        JOptionPane.showMessageDialog(panel, "Usuário não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao buscar usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        calculateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    double purchaseAmount = Double.parseDouble(purchaseField.getText());
                    // Calcular pontos
                    int points = calculatePoints(purchaseAmount);
                    pointsField.setText(Integer.toString(points));
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(panel, "Digite um valor válido para a compra.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        assignButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int userId = Integer.parseInt(idField.getText());
                float currentPoints = Float.parseFloat(pointsField.getText());

                try (Connection conn = ds.getConnection()){
                    // Atualizar pontos com base no valor calculado pelo botão "Calcular Pontos"
                    String updateQuery = "UPDATE Clientes SET pontos = pontos + ? WHERE id = ?";
                    PreparedStatement statement = conn.prepareStatement(updateQuery);
                    statement.setFloat(1, currentPoints); // Apenas adiciona os pontos calculados anteriormente
                    statement.setInt(2, userId);
                    if(currentPoints>0) {
            			statement.executeUpdate();
            			JOptionPane.showMessageDialog(panel, currentPoints + " pontos reduzidos com sucesso ao usuário com ID " + userId);
            			} else {
            			JOptionPane.showMessageDialog(panel, "Erro! Insira valores positivos.");	
            			}
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(panel, "Erro ao atribuir pontos ao usuário.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    
    lowerButton.addActionListener(new ActionListener() {
    	public void actionPerformed(ActionEvent e) {
    		int userId = Integer.parseInt(idField.getText());
    		float currentPoints = Float.parseFloat(negativePoints.getText());
    		
    		try (Connection conn = ds.getConnection()){
    			String updateQuery = "UPDATE Clientes SET pontos = pontos - ? WHERE id = ?";
    
    			PreparedStatement statement = conn.prepareStatement(updateQuery);
    			statement.setFloat(1,  currentPoints);
    			statement.setInt(2, userId);
    			if(currentPoints>0) {
    			statement.executeUpdate();
    			JOptionPane.showMessageDialog(panel, currentPoints + " pontos reduzidos com sucesso ao usuário com ID " + userId);
    			} else {
    			JOptionPane.showMessageDialog(panel, "Erro! Insira valores positivos.");	
    			}
    		}catch(SQLException ex){
    			ex.printStackTrace();
                JOptionPane.showMessageDialog(panel, "Erro ao atribuir pontos ao usuário.", "Erro", JOptionPane.ERROR_MESSAGE);	
    		}
    	}
    });
    return panel;
}

    private static int calculatePoints(double purchaseAmount) {
        double points = purchaseAmount * 0.03;

        int roundedPoints = (int) Math.round(points);
        return roundedPoints;
    }
}